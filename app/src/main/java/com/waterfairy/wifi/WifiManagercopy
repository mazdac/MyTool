package com.waterfairy.wifi;

import android.app.Activity;
import android.content.Context;
import android.net.wifi.WifiInfo;
import android.util.Log;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import static android.content.Context.WIFI_SERVICE;

/**
 * Created by water_fairy on 2017/3/13.
 */

public class WifiManager {
    private static final String TAG = "WifiManger";
    private static final WifiManager WIFI_MANAGER = new WifiManager();
    private final int port = 30000;//服务器端口
    private HashMap<String, UserThread> mDeviceHashMap;
    private ServerThread serverThread;
    private SearchWifiThread searchWifiThread;


    public static WifiManager getInstance() {
        return WIFI_MANAGER;
    }

    /**
     * 客户端
     *
     * @param ip
     */

    public void connect(String ip, WifiUserListener callback) {
        connect(ip, null, null, callback);
    }

    /**
     * @param ip
     * @param checkMsg  连接校验
     * @param returnMsg 校验返回
     * @param callback
     * @return 是否已将连接
     */
    public boolean connect(String ip, String checkMsg, String returnMsg, WifiUserListener callback) {
        if (mDeviceHashMap == null) {
            mDeviceHashMap = new HashMap<>();
        }
        if (mDeviceHashMap.containsKey(ip)) {
            Log.i(TAG, "connect: 已连接");
            return true;
        }
        new UserThread(ip, port, checkMsg, returnMsg, mDeviceHashMap, callback).start();
        return false;
    }

    public void setAsServer(boolean isOneUser, WifiServerListener listener) {
        setAsServer(isOneUser, null, null, listener);
    }

    /**
     * 作为服务器
     *
     * @param isOneUser  是否为一个用户
     * @param receiveMsg 接收校验
     * @param returnMsg  返回校验
     * @param listener
     */
    public void setAsServer(boolean isOneUser, String receiveMsg, String returnMsg, WifiServerListener listener) {
        if (serverThread == null) {
            serverThread = new ServerThread(port, isOneUser, receiveMsg, returnMsg, listener);
        }
        if (!serverThread.isServerOpen()) {
            if (!serverThread.isAlive()) {
                serverThread.start();
            }
        }
    }


    /**
     * 客户端写入
     *
     * @param ip
     * @param bytes
     */
    public void writeMsgFromUser(String ip, byte[] bytes) {
        UserThread userThread = mDeviceHashMap.get(ip);
        if (userThread != null) {
            userThread.write(bytes);
        }
    }

    public void writeMsgFromUser(byte[] bytes) {
        writeMsgFromUser(UserThread.lastUserIpAddress, bytes);
    }

    /**
     * 由服务端写入
     * 用于只有一个用户的时候  isOneUser = true
     *
     * @param bytes
     */
    public void writeMsgFromServer(byte[] bytes) {
        if (serverThread != null) {
            serverThread.write(bytes);
        }
    }

    /**
     * 由服务端写入
     *
     * @param ipAddress
     * @param bytes
     */
    public void writeMsgFromServer(String ipAddress, byte[] bytes) {
        if (serverThread != null) {
            serverThread.write(ipAddress, bytes);
        }
    }

    /**
     * 搜索局域网中的设备
     *
     * @param activity
     * @param onWifiDeviceSearchListener
     */
    public void searchWifi(Activity activity, OnWifiDeviceSearchListener onWifiDeviceSearchListener) {
        searchWifi(activity, null, null, onWifiDeviceSearchListener);
    }


    /**
     * 搜索指定设备
     *
     * @param activity
     * @param checkMsg                   验证信息
     * @param returnMsg                  返回信息
     * @param onWifiDeviceSearchListener
     */
    public void searchWifi(Activity activity, String checkMsg, String returnMsg, OnWifiDeviceSearchListener onWifiDeviceSearchListener) {
        String localIpIndex = getLocalIpIndex(activity);
        searchWifiThread = new SearchWifiThread(activity, localIpIndex, port, checkMsg, returnMsg, onWifiDeviceSearchListener);
        searchWifiThread.start();

    }

    public void stopSearchWifi() {
        searchWifiThread.stopSearch();
    }

//    /**
//     * 客户端
//     * 主动连接线程
//     */
//    class UserThread extends Thread {
//        private String ip;
//        private WifiUserListener listener;
//        private String checkMsg;//校验
//        private String returnMsg;//返回
//
//        private final int timeout = 2000;
//        private InputStream inputStream;
//        private OutputStream outputStream;
//
//        private Socket socket;
//
//        public UserThread(String ip, String checkMsg, String returnMsg, WifiUserListener listener) {
//            this.ip = ip;
//            this.checkMsg = checkMsg;
//            this.returnMsg = returnMsg;
//            this.listener = listener;
//        }
//
//        @Override
//        public void run() {
//            super.run();
//            socket = new Socket();
//            try {
//                boolean canCheck = true;//是否可以校验,只允许校验一次.
//                listener.onConnecting();
//                socket.connect(new InetSocketAddress(ip, port), timeout);
//                mDeviceHashMap.put(ip, this);
//                lastUserIpAddress = ip;
//                listener.onConnectSuccess();
//                outputStream = socket.getOutputStream();//输出 写入
//                inputStream = socket.getInputStream();//输入 读取
//                if (checkMsg != null) {
//                    write(checkMsg.getBytes());
//                }
//                while (true) {
//                    if (socket.isConnected()) {
//                        int len = 0;
//                        byte[] bytes = new byte[1024 * 1024];
//                        try {
//                            len = inputStream.read(bytes);
//                        } catch (IOException e) {
//                            listener.onDisconnect();
//                            mDeviceHashMap.remove(ip);
//                            break;
//                        }
//
//                        if (len != -1) {
//                            byte[] readBytes = Arrays.copyOf(bytes, len);
//                            if (returnMsg != null && canCheck) {
//                                canCheck = false;
//                                if (returnMsg.equals(new String(readBytes))) {
//                                    listener.isRightServer(true);
//                                } else {
//                                    listener.isRightServer(false);
//                                }
//                            }
//                            listener.onRead(readBytes);
//                        } else if (len == -1) {
//                            listener.onDisconnect();
//                            mDeviceHashMap.remove(ip);
//                            break;
//                        }
//
//                    } else {
//                        disconnect();
//                        listener.onDisconnect();
//                        mDeviceHashMap.remove(ip);
//                        break;
//                    }
//                }
//
//
//            } catch (ConnectException e) {
//                listener.onConnectError();
//                e.printStackTrace();
//            } catch (IOException e) {
//                listener.onConnectError();
//                e.printStackTrace();
//            }
//        }
//
//        public void write(byte[] bytes) {
//            try {
//                outputStream.write(bytes);
//                listener.onWrite(bytes);
//            } catch (IOException e) {
//                e.printStackTrace();
//                listener.onWriteError();
//            }
//        }
//
//        public void disconnect() {
//            try {
//                socket.close();
//                socket = null;
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        }
//    }

//    /**
//     * 服务器线程
//     */
//    class ServerThread extends Thread {
//        private InputStream inputStream;
//        private OutputStream outputStream;
//        private WifiServerListener listener;
//        private HashMap<String, OutputStream> outputStreamHashMap;
//        private String receiveMsg;//接收到客户端的校验msg
//        private String returnMsg;//返回给客户端的msg
//        private ServerSocket serverSocket;
//        private String interruptAddress;
//
//
//        public ServerThread(String receiveMsg, String returnMsg, WifiServerListener listener) {
//            this.receiveMsg = receiveMsg;
//            this.returnMsg = returnMsg;
//            this.listener = listener;
//        }
//
//        @Override
//        public void run() {
//            super.run();
//            try {
//                mServerSocketHashMap = new HashMap<>();
//                listener.onStarting();
//                serverSocket = new ServerSocket(port);
//                isServerOpen = true;
//                listener.onStartServerSuccess();
//                accept(serverSocket);
//            } catch (IOException e) {
//                e.printStackTrace();
//                isServerOpen = false;
//                listener.onStartServerError();
//            }
//        }
//
//        private void accept(ServerSocket serverSocket) {
//            Log.i(TAG, "accept: 开启新服务 isOneUser:" + isOneUser);
//            Socket socket = null;
//            boolean canReturn = true;
//            if (serverSocket == null) return;
//            try {
//                socket = serverSocket.accept();
//            } catch (IOException e) {
//                e.printStackTrace();
//                return;
//            }
//            if (!isOneUser) {
//                accept(serverSocket);
//            }
//            InetAddress inetAddress = socket.getInetAddress();
//            String ipAddress = inetAddress.getHostAddress().toString();
//            if (mUserConnect == null) {
//                mUserConnect = new HashMap<>();
//            }
//            if (isOneUser) {
//                connectUserIpAddress = ipAddress;
//            }
//            mServerSocketHashMap.put(ipAddress, socket);
//            mUserConnect.put(ipAddress, true);
//            listener.onConnectSuccess(ipAddress);
//            Log.i(TAG, "run: " + ipAddress);
//            try {
//                inputStream = socket.getInputStream();
//                outputStream = socket.getOutputStream();
//                if (outputStreamHashMap == null) {
//                    outputStreamHashMap = new HashMap<>();
//                }
//                outputStreamHashMap.put(ipAddress, outputStream);
//                while (true) {
//                    if (socket.isConnected()) {
//                        int len = 0;
//                        byte[] bytes = new byte[1024 * 1024];
//                        try {
//                            len = inputStream.read(bytes);
//                        } catch (IOException e) {
//                            e.printStackTrace();
//                            interruptAddress = ipAddress;
//                            disconnectIn();
//                        }
//
//                        if (len != -1) {
//                            byte[] readBytes = Arrays.copyOf(bytes, len);
//                            if (receiveMsg != null && canReturn) {
//                                canReturn = false;
//                                if (receiveMsg.equals(new String(readBytes))) {
//                                    write(ipAddress, returnMsg.getBytes());
//                                }
//                            }
//                            listener.onRead(readBytes);
//                        } else {
//                            interruptAddress = ipAddress;
//                            disconnectIn();
//                            if (isOneUser) {
//                                accept(serverSocket);
//                            }
//                            break;
//                        }
//                    } else {
//                        interruptAddress = ipAddress;
//                        disconnectIn();
//                        if (isOneUser) {
//                            accept(serverSocket);
//                        }
//                        break;
//                    }
//                }
//            } catch (IOException e) {
//                e.printStackTrace();
//                disconnectIn();
//            }
//
//
//        }
//
//
//        private void disconnectIn() {
//            mUserConnect.remove(interruptAddress);
//            outputStreamHashMap.remove(interruptAddress);
//            mServerSocketHashMap.remove(interruptAddress);
//            listener.onDisconnect(isServerOpen, interruptAddress);
//        }
//
//        public void write(String ipAddress, byte[] bytes) {
//            if (outputStreamHashMap != null) {
//                OutputStream outputStream = outputStreamHashMap.get(ipAddress);
//                if (outputStream != null) {
//                    try {
//                        outputStream.write(bytes);
//                        listener.onWrite(ipAddress, bytes);
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                        listener.onWriteError(ipAddress);
//                    }
//                } else {
//                    Log.i(TAG, "write: 未开启服务");
//                }
//            } else {
//                Log.i(TAG, "write: 未开启服务");
//            }
//        }
//
//        public void disconnect(String ip) {
//            interruptAddress = ip;
//            Socket socket = mServerSocketHashMap.get(ip);
//            if (socket != null) {
//                try {
//                    socket.close();
//                    socket = null;
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            }
//        }
//
//        public void closeServer() {
//            if (serverSocket != null) {
//                try {
//                    serverSocket.close();
//                    isServerOpen = false;
//                    listener.onServerClose();
//                } catch (IOException e) {
//                    e.printStackTrace();
//                    isServerOpen = false;
//                }
//            }
//        }
//    }

//    /**
//     * 搜索线程
//     */
//    class SearchWifiThread extends Thread {
//        private Activity activity;
//        private List<Thread> threads;
//        private int searchNum;//搜索过的数量
//        private String localIpIndex;//192.168.1.
//        private OnWifiDeviceSearchListener searchListener;
//        private String checkMsg;//校验信息
//        private String returnMsg;//返回信息
//        private final int MAX_NUM = 256;
//        private Runtime run = Runtime.getRuntime();//获取当前运行环境，来执行ping，相当于windows的cmd
//        private String ping = "ping -c 1 -w 0.5 ";//其中 -c 1为发送的次数，-w 表示发送后等待响应的时间
//
//        public SearchWifiThread(Activity activity, String localIpIndex, String checkMsg, String returnMsg, OnWifiDeviceSearchListener searchListener) {
//            this.activity = activity;
//            this.localIpIndex = localIpIndex;
//            this.checkMsg = checkMsg;
//            this.returnMsg = returnMsg;
//            this.searchListener = searchListener;
//        }
//
//        @Override
//        public void run() {
//            super.run();
//            searchNum = 0;
//            threads = new ArrayList<>();
//            for (int i = 0; i < MAX_NUM; i++) {
//                //开新的线程去ping
//                //ping的通的 去连接 发送 checkMsg
//                //如果 服务器返回 returnMsg 相同  则为目标服务器
//                newThreadToConnect(i);
//            }
//        }
//
//        private void newThreadToConnect(final int index) {
//            final Thread thread = new Thread() {
//                @Override
//                public void run() {
//                    super.run();
//                    final String ip = localIpIndex + index;
//                    try {
//                        //ping  result
//                        Process exec = run.exec(ping + ip);
//                        int result = exec.waitFor();
//                        if (result == 0) {
//                            //ping 成功
//                            activity.runOnUiThread(new Runnable() {
//                                @Override
//                                public void run() {
//                                    searchListener.onSearch(ip);
//                                }
//                            });
//
//                            sendMsg(ip, checkMsg, new OnSendCallback() {
//                                @Override
//                                public void onBack(String msg) {
//                                    if (returnMsg.equals(msg)) {
//                                        activity.runOnUiThread(new Runnable() {
//                                            @Override
//                                            public void run() {
//                                                searchListener.onRightSearch(ip);
//                                            }
//                                        });
//
//                                    }
//                                }
//                            });
//                        }
//                        searchNum++;
//                        if (searchNum == MAX_NUM) {
//                            activity.runOnUiThread(new Runnable() {
//                                @Override
//                                public void run() {
//                                    searchListener.onSearchFinish();
//                                }
//                            });
//                        }
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    } catch (InterruptedException e) {
//                        e.printStackTrace();
//                    }
//                }
//            };
//            thread.start();
//            threads.add(thread);
//        }
//
//
//        public void stopSearch() {
//            for (int i = 0; i < threads.size(); i++) {
//                Thread thread = threads.get(i);
//                if (thread.isAlive()) {
//                    thread.interrupt();
//                }
//            }
//        }
//
//
//        //向serversocket发送消息
//        private void sendMsg(String ip, String msg, OnSendCallback onSendCallback) {
//
//            String res = null;
//            Socket socket = null;
//
//            try {
//                socket = new Socket(ip, port);
//                //向服务器发送消息
//                PrintWriter os = new PrintWriter(socket.getOutputStream());
//                os.print(msg);
//                os.flush();// 刷新输出流，使Server马上收到该字符串
//
//                //从服务器获取返回消息
//                InputStream inputStream = socket.getInputStream();
//                int len = 0;
//                byte[] bytes = new byte[1024];
//                while ((len = inputStream.read(bytes)) != -1) {
//                    res = new String(Arrays.copyOf(bytes, len));
//                    onSendCallback.onBack(res);
//                    break;
//                }
//            } catch (Exception unknownHost) {
//                System.out.println("You are trying to connect to an unknown host!");
//            } finally {
//                try {
//                    if (socket != null) {
//                        socket.close();
//                    }
//                } catch (IOException ioException) {
//                    ioException.printStackTrace();
//                }
//
//            }
//        }
//
//
//    }

    public String getLocalIP(Context context) {
        android.net.wifi.WifiManager wifiService = (android.net.wifi.WifiManager) context.getSystemService(WIFI_SERVICE);
        WifiInfo wifiinfo = wifiService.getConnectionInfo();
        return intToIp(wifiinfo.getIpAddress());
    }

    public String getLocalIpIndex(Context context) {
        String localIP = getLocalIP(context);
        if (!localIP.equals("")) {
            return localIP.substring(0, localIP.lastIndexOf(".") + 1);
        }
        return "";
    }

    private String intToIp(int ipAddress) {
        return (ipAddress & 0xFF) + "." + ((ipAddress >> 8) & 0xFF) + "." + ((ipAddress >> 16) & 0xFF)
                + "." + (ipAddress >> 24 & 0xFF);
    }

//    interface OnSendCallback {
//        /**
//         * ping通  并且返回数据
//         *
//         * @param msg
//         */
//        void onBack(String msg);
//    }

    public void disconnect(String ip) {
        UserThread userThread = mDeviceHashMap.get(ip);
        if (userThread != null) {
            userThread.disconnect();
        }
    }

    public void disconnect() {
        disconnect(UserThread.lastUserIpAddress);
    }

    public void disconnectFromServer() {
        serverThread.disconnect();
    }

    public void disconnectFromServer(String ip) {
        serverThread.disconnect(ip);
    }

    public void closeServer() {
        serverThread.closeServer();
        serverThread = null;
    }

}
